import numpy as np
from matplotlib import pyplot as plt
import pyfits
from sklearn.svm import SVR
from sklearn import preprocessing
import pandas as pd
from pylab import *
from sklearn.cross_validation import train_test_split

"""
Download data set from https://bigml.com/dashboard/dataset/55a43570200d5a2594002c9d
"""

data = pd.read_csv('~/Downloads/bigml_55a43570200d5a2594002c9d.csv')
list(data.columns.values)
good = data[data['Is Daylight'] == True]
data_day_av = good.groupby('Day of Year').mean()
features = pd.DataFrame(data_day_av, columns=['Average Temperature (Day)', 'Average Wind Speed (Day)'])
target = pd.DataFrame(data_day_av, columns=['Power Generated'])

x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.10, random_state=42)

x_train_scaled = preprocessing.scale(x_train)
x_test_scaled = preprocessing.scale(x_test)
clf = SVR(kernel='rbf', gamma=0.1, C=100.0)
clf.fit(x_train_scaled, y_train.squeeze())
y_pred = clf.predict(x_test_scaled)

print 'Precision ', np.mean(np.abs(y_pred-y_test.squeeze())/ y_test.squeeze())
#0.915374680404

"""
Query http://www.ncdc.noaa.gov/cdo-web/datasets#GHCND for Daily summaries from 09/01/2008 to 08/31/2009 (matching the above dataset) ordered by increasing date
TMIN/MAX - Minimum temperature (tenths of degrees C)
AWND - Average daily wind speed (tenths of meters per second)
"""

noaa = pd.read_csv('~/Downloads/569776.csv', low_memory=False)

"""
Convert temperatures in Fahrenheit and the wind speed in miles/hour
"""
 
av_temp_degrees = (noaa['TMIN']+noaa['TMAX'])/2./10.
av_temp_fahr = av_temp_degrees*9./5. + 32. 

noaa['Average Temperature (Day)'] = av_temp_fahr
noaa['Average Wind Speed (Day)'] = noaa['AWND']*0.000621371*3600/10

"""
Select the station we want to look at
"""

good_noaa = noaa[noaa['STATION_NAME'] == 'HONOLULU INTERNATIONAL AIRPORT HI US']
good_noaa.loc[good_noaa['Average Temperature (Day)'] < 0] = np.mean(good_noaa[good_noaa['Average Temperature (Day)']>0]['Average Temperature (Day)'])
caract = pd.DataFrame(good_noaa, columns=['Average Temperature (Day)', 'Average Wind Speed (Day)'])

caract_scaled = preprocessing.scale(caract)

solar_pred = clf.predict(caract_scaled)

"""
Download from https://archive.ics.uci.edu/ml/datasets/Individual+household+electric+power+consumption#
Converting into ascii:
sed 's/;/ /g' household_power_consumption.txt > resultfile
Removing missing values
sed '/?/d' resultfile > finalfile
Conversion in csv using Topcat
"""

conso = pd.read_csv('~/Downloads/conso.csv')

test = conso[(conso['Date'] == '1/9/2008')]
#895009    1/9/2008
test = conso[(conso['Date'] == '31/8/2009')]
#1416211    31/8/2009

"""
Select the relevant period of time
"""
good = conso[895009:1416211]

"""
One missing value 06/14/2009
We attribute the mean consumption between the 06/12/2009 and the 06/14/2009 to prevent any bias coming from missing values during the contiguous days
"""

conso_day = good.groupby('Date').sum()
conso_day['Date'] = pd.to_datetime(conso_day.index, dayfirst=True)

mydata = pd.DataFrame(conso_day, columns=['Date', 'Global_active_power'])

value = (mydata[(mydata['Date'] == '2009-06-12')]['Global_active_power'].squeeze() + mydata[(mydata['Date'] == '2009-06-16')]['Global_active_power'].squeeze())/2


df2 = pd.DataFrame(np.array([[pd.to_datetime('2009-06-14'), value]]), columns=['Date', 'Global_active_power'])
newdata = mydata.append(df2, ignore_index=True)

final = newdata.sort('Date')

print np.mean(final['Global_active_power'])

"""
Plot the predictions of the power generated by solar panels in Honolulu for the year
Comparison with CA
"""

tmp = pd.DataFrame(solar_pred)
tmp.index = final['Date']

ym = solar_pred*0.92
yp = solar_pred*1.08

fig = figure()
plt.plot(final['Date'],target['Power Generated'], c='m', marker='o', linestyle="None", label='Training sample CA')
fig.autofmt_xdate()
plt.plot(final['Date'],solar_pred, c='k', lw=2, label='Honolulu')
plt.fill_between(tmp.index, ym, yp, edgecolor='none', color='#AAAAAA', alpha=0.4)
plt.xlabel("Month")
plt.ylabel("Power generated (Watt)")
plt.legend()
plt.savefig('Power_HI.pdf')

fig = figure()
plt.plot(final['Date'],solar_pred/2., c='b', lw=2, label='Solar generated power')
plt.fill_between(tmp.index, ym/2., yp/2., edgecolor='none', color='#AAAAAA', alpha=0.4)
fig.autofmt_xdate()
plt.plot(final['Date'], final['Global_active_power'], c='m', lw=2, label='Power consumption')
plt.xlabel("Month")
plt.ylabel("Power (Watt)")
plt.title("Electric power in an individual household")
plt.legend()
plt.savefig('Conso.pdf')

"""
fig = figure()
plt.plot(final['Date'],features['Average Temperature (Day)'], c='m', marker='o', linestyle="None", label='Training sample CA')
fig.autofmt_xdate()
plt.plot(final['Date'],caract['Average Temperature (Day)'], c='k', lw=2, label='Honolulu')
plt.xlabel("Month")
plt.ylabel("Temperature")
plt.legend()
plt.savefig('Temperature.pdf')

fig = figure()
plt.plot(final['Date'],features['Average Wind Speed (Day)'], c='m', marker='o', linestyle="None", label='Training sample CA')
fig.autofmt_xdate()
plt.plot(final['Date'],caract['Average Wind Speed (Day)'], c='k', lw=2, label='Honolulu')
plt.xlabel("Month")
plt.ylabel("Wind Speed")
plt.legend()
plt.savefig('Wind.pdf')

Sizes:
192K	bigml_55a43570200d5a2594002c9d.csv
cdhcp30% du -ah conso.csv 
105M	conso.csv
cdhcp30% du -ah 569776.csv
 24M	569776.csv
"""
